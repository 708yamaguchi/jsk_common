#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import argparse
import sys

import message_filters
import rospy

from rostopic import get_topic_class


class IsSynchronized(object):

    def __init__(self, topics, queue_size):
        self.is_sync = False
        self.subs = []
        for tp in topics:
            msg_class, real_topic, _ = get_topic_class(tp, blocking=True)
            sub = message_filters.Subscriber(real_topic, msg_class)
            self.subs.append(sub)
            print('subscribed to [{}]'.format(real_topic))
        sync = message_filters.TimeSynchronizer(self.subs, queue_size=queue_size)
        sync.registerCallback(self.callback)

    def callback(self, *msg):
        self.is_sync = True

    def __del__(self):
        for sub in self.subs:
            sub.unregister()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('topics', nargs='+',
                        help='topics which should be synchronized')
    parser.add_argument('-q', '--queue-size', type=int, default=100,
                        help='Size of queue for the synchronization')
    args = parser.parse_args()

    topics = args.topics
    if len(topics) < 2:
        print('[WARNING] Please specify at least 2 topics', file=sys.stderr)
        sys.exit(1)
    queue_size = args.queue_size

    check_sync = IsSynchronized(topics=topics, queue_size=queue_size)
    print('listening these topics for 5 seconds in rostime')
    rospy.sleep(rospy.Duration(5))
    result = 'synchronized' if check_sync.is_sync else 'not synchronized'
    print("these {} topics are: '{}'".format(len(topics), result))
    sys.exit(~check_sync.is_sync)


if __name__ == '__main__':
    rospy.init_node('is_synchronized', anonymous=True)
    main()
